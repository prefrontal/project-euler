// Project Euler Problem 44, Swift
//
// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. 
// The first ten pentagonal numbers are:
// 
// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
// 
// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. 
// However, their difference, 70 − 22 = 48, is not pentagonal.
// 
// Find the pair of pentagonal numbers, Pj and Pk, for which 
// their sum and difference are pentagonal and D = |Pk − Pj| 
// is minimised; what is the value of D?
//
// Answer: 5482660

import Foundation

let MAXIMUM_VALUE = 5000;

// Calculates a pentagonal number from an input integer
func CalculatePentagonal (input:Int) -> Int
{
	return (input * (3*input - 1) / 2);
}

// Find all pentagonal numbers starting with one 
// and going to a predetermined maximum value
func FindPentagonalNumbers (maximum:Int) -> [Int]
{
	var numbers:[Int] = [Int]()
	
	for (var i:Int = 1; i <= maximum; i++)
	{
		numbers.append (CalculatePentagonal(i));
	}

	return numbers;
}

// Determine if a number is pentagonal
func IsPentagonal (input:Int) -> Bool
{
	let temp:Double = (sqrt(Double(1 + 24 * input)) + 1.0) / 6.0;
	return (temp == Double(Int(temp)))
}


var finalAnswer:Int = 0;

var numbers:[Int] = FindPentagonalNumbers (MAXIMUM_VALUE);

for (var i:Int = 0; i < MAXIMUM_VALUE; i++) // Outer loop
{
	for (var j:Int = i; j < MAXIMUM_VALUE; j++) // Inner loop
	{
		let sum:Int = numbers[i] + numbers[j];
		let difference:Int = numbers[j] - numbers[i];
					
		if (IsPentagonal(sum) && IsPentagonal(difference))
		{
			finalAnswer = abs(CalculatePentagonal(j+1) - CalculatePentagonal(i+1));
		}
	}
}

print ("The final answer is: \(finalAnswer)")