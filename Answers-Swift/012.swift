// Project Euler Problem 12
//
// The sequence of triangle numbers is generated by adding the natural numbers. 
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
// The first ten terms would be:
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// 
// Let us list the factors of the first seven triangle numbers:
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?
//
// Answer: 76576500

// Notes: this brute-force method can take a while - especially in Swift

let DIVISOR_TARGET = 500;

var currentNumber = 0;
var currentSum = 0;
var iteration = 0;

while (true)
{
	// Identify current triangle number
	currentNumber++;
	currentSum += currentNumber;
	
	var factorCount = 0;
	
	for (var i = 1; i <= currentSum; i++)
	{
		 if (0 == (currentSum % i))
		{
			factorCount++;
		}
	}
	
	// print ("N \(currentSum) F \(factorCount)")
	
	if (factorCount > DIVISOR_TARGET)
	{
		break;
	}
		
	iteration++;    
		
	if (0 == (iteration % 1000))
	{
		print ("\(currentSum) - \(factorCount)")
	}   
}

print ("The triangle number is: \(currentSum) \(currentNumber)")



