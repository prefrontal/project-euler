#!/usr/bin/python

# Project Euler Problem 44
#
# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. 
# The first ten pentagonal numbers are:
# 
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
# 
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. 
# However, their difference, 70 − 22 = 48, is not pentagonal.
# 
# Find the pair of pentagonal numbers, Pj and Pk, for which 
# their sum and difference are pentagonal and D = |Pk − Pj| 
# is minimised; what is the value of D?
#
# Answer: 5482660

import math

MAXIMUM_VALUE = 5000

# Calculates a pentagonal number from an input integer
def CalculatePentagonal (input):
	return (input * (3*input - 1) / 2)

# Find all pentagonal numbers starting with one 
# and going to a predetermined maximum value
def FindPentagonalNumbers (maximum):
	numbers = []
	
	for i in range(1,maximum+1):
		numbers.append (CalculatePentagonal(i))

	return numbers

# Determine if a number is pentagonal
def IsPentagonal (input):
	temp = (math.sqrt(1 + 24 * input) + 1.0) / 6.0;
	return temp == int(temp)


finalAnswer = 0

numbers = FindPentagonalNumbers (MAXIMUM_VALUE)

for i in range(0, MAXIMUM_VALUE):
	for j in range(i, MAXIMUM_VALUE):
		sum = numbers[i] + numbers[j]
		difference = numbers[j] - numbers[i]
					
		if (IsPentagonal(sum) and IsPentagonal(difference)):
			finalAnswer = abs(CalculatePentagonal(j+1) - CalculatePentagonal(i+1))

print ("The final answer is: ", int(finalAnswer))
